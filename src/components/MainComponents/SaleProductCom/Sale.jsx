/*
  Sale.jsx ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡∏ß‡∏°‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î (‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á)
  ‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏¢‡πà‡∏≠‡∏¢ 3 ‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠
  Scan.jsx ‡∏Ñ‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤ scan ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  Aside.jsx ‡∏Ñ‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤ Navbar ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
  Navbar.jsx ‡∏Ñ‡∏∑‡∏≠ Navbar ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô 

  **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°**
  -‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á props scan , setScan ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î 125
  -‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ LoadingSpinner.jsx ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≠ fetch API
  -‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Toastify ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  DATE : 30/‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô/2023
  OWNER : piyawat W.

*/

import { useState, useEffect } from "react";
import Scan from "./Scan";
import Aside from "../../NavbarAndAsideCom/Aside";
import LoadingSpinner from "../../LoaddingComponents/LoadingSpinner";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { BiSearchAlt } from "react-icons/bi";
import { RiAddCircleFill } from "react-icons/ri";
import useBarcodeScanner from "../../../services/useBarcodeScanner";
import productNotFoundSound from "../../../assets/Sounds/Productnotfound.mp3";

function Sale() {
  const [products, setProducts] = useState([]); //‡∏£‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ Array products
  const [isLoading, setIsLoading] = useState(true); //‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î
  const [cart, setCart] = useState([]); //‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞
  const [searchResults, setSearchResults] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  function addProduct(product) {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingProductIndex = cart.findIndex(
      (item) => item._id === product._id
    );

    if (existingProductIndex !== -1) {
      // ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß
      // ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ
      const updatedCart = [...cart];
      updatedCart[existingProductIndex].quantity += 1;
      setCart(updatedCart);
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      // ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏õ‡πá‡∏ô 1
      setCart([...cart, { ...product, quantity: 1 }]);
    }
  }
  // Fetch API ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const fetchProducts = () => {
    fetch("http://localhost:5500/view-product")
      .then((response) => response.json())
      .then((data) => {
        setProducts(data.products);
        setIsLoading(false); // Set ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
      });
  }
  useEffect(() => {
    document.title = "POSYAYEE üõí ‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô";
    fetchProducts();
  }, []);

  // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡∏î‡∏±‡∏Ñ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏õ‡πá‡∏ô null
  const filteredProducts = products.filter(
    (product) =>
      (product.barcode === "" && product.volume > 0) || product.volume == null
  );

  useEffect(() => {
    if (searchTerm) {
      const filteredProducts = products.filter((product) =>
        product.name.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setSearchResults(filteredProducts);
    } else {
      setSearchResults([]); // ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    }
  }, [searchTerm, products]);

  //Barcode Scan
  const handleBarcodeScan = (barcode) => {
    console.log(`Barcode : ${barcode}`);
    const scannedProduct = products.find(
      (product) => product.barcode === barcode
    );
    if (scannedProduct) {
      console.log(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠: 
       ${scannedProduct.name}
       ${scannedProduct._id}
       ${scannedProduct.price}`);
      addProduct(scannedProduct);
    } else {
      console.log("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤!");
      new Audio(productNotFoundSound).play();

    }
  };
  useBarcodeScanner(handleBarcodeScan);
  
  return (
    <div>
      <div className="flex relative">
        {/* ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
        <ToastContainer
          position="top-center"
          autoClose={1000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="light"
        />
        {/* Import Aside ‡∏°‡∏≤‡πÉ‡∏ä‡πâ */}
        <Aside />
        <div className="w-[40%] ">
          {/* Search box */}
          <div className="w-full h-[5rem] flex justify-center items-center bg-white px-1 pr-6">
            <div className="w-full  h-[50px] rounded-[16px] flex items-center relative">
              0
              <BiSearchAlt size={30} className="z-20 text-[#737791] pl-2" />
              <input
                type="text"
                name="find-products"
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..."
                className="bg-[#F9FAFB] text-[#737791] flex pl-10 w-full
                h-full absolute placeholder-style outline-none rounded-[10px] border"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
              <div
                className={
                  searchResults != 0
                    ? `absolute bg-white w-full z-50 cursor-pointer rounded-lg top-16 shadow-lg border`
                    : ` absolute bg-white w-full z-50 cursor-pointer rounded-lg top-16 shadow-lg`
                }
              >
                <div className="">
                  {searchResults.slice(0, 11).map((product, index) => (
                    <div
                      key={product._id}
                      className={
                        index % 2 === 0
                          ? `flex items-center bg-white rounded-md`
                          : `flex items-center bg-[#4545450f] rounded-md`
                      }
                    >
                      <div className=" w-[80px] p-2 h-[60px] flex items-center">
                        <img
                          className=" object-cover w-full h-full rounded-md"
                          src={product.image}
                          alt=""
                        />
                      </div>
                      <div className="flex justify-between items-center w-full">
                        <div className="p-2">
                          <p>{product.name}</p>
                        </div>
                        <div className="pr-5 flex gap-1">
                          <RiAddCircleFill
                            color="#4C49ED"
                            size={25}
                            className="hover:scale-105"
                            onClick={() => addProduct(product)}
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
          <div
            className="flex bg-white flex-wrap justify-center full overflow-y-scroll gap-1"
            style={{ height: "calc(100vh - 5rem)" }}
          >
            {/* ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•*/}
            {isLoading ? (
              <LoadingSpinner />
            ) : (
              // map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
              filteredProducts.map((product) => (
                <div
                  key={product._id}
                  className="w-[150px]"
                  onClick={() => addProduct(product)}
                >
                  <div
                    className="border mt-2 h-[200px] grid rounded-md bg-white cursor-pointer hover:border-[3px] 
                  hover:border-[#0085FF] shadow-md"
                  >
                    <img
                      className="h-[8rem] object-cover rounded-lg p-1 w-full"
                      src={product.image}
                      alt={product.name}
                    />
                    <div className="text-left pl-2 pt-3 overflow-hidden h-[2.1rem] text-sm">
                      <p>{product.name}</p>
                    </div>
                    <div className="font-bold text-[#4C49ED] pl-2 text-[20px]">
                      <h1>{product.price.toFixed(2)} ‡∏ø</h1>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡∏ô‡πÄ‡∏ô‡∏ô‡∏ï‡πå Scan ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á cart ‡πÅ‡∏•‡∏∞ setCart ‡πÄ‡∏õ‡πá‡∏ô props */}
        <Scan cart={cart} setCart={setCart} />
      </div>
    </div>
  );
}

export default Sale;
